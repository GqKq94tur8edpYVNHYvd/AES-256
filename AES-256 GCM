import secrets
import base64
import re
import textwrap
import pyperclip
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes

# Function to derive a key from the password
def derive_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,  # 256 bits key size for AES
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

# Function to format output with 64 characters per line
def format_output(encoded_message: str, line_length: int = 64) -> str:
    return '\n'.join(textwrap.wrap(encoded_message, line_length))

# Function to encrypt a message
def encrypt_message(password: str, message: str) -> str:
    salt = secrets.token_bytes(16)
    nonce = secrets.token_bytes(12)  # AES-GCM uses a 96-bit (12 bytes) nonce
    key = derive_key(password, salt)
    algorithm = algorithms.AES(key)
    cipher = Cipher(algorithm, mode=modes.GCM(nonce), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_message = encryptor.update(message.encode()) + encryptor.finalize()
    combined_message = salt + nonce + encryptor.tag + encrypted_message
    encoded_message = base64.b64encode(combined_message).decode()
    return format_output(encoded_message)

# Function to decrypt a message
def decrypt_message(password: str, encoded_data: str) -> str:
    encoded_data = encoded_data.replace('\n', '')
    try:
        encrypted_data = base64.b64decode(encoded_data)
    except base64.binascii.Error as e:
        return f"Decoding error: {str(e)}"

    salt = encrypted_data[:16]
    nonce = encrypted_data[16:28]
    tag = encrypted_data[28:44]
    ciphertext = encrypted_data[44:]
    key = derive_key(password, salt)
    algorithm = algorithms.AES(key)
    cipher = Cipher(algorithm, mode=modes.GCM(nonce), backend=default_backend())
    decryptor = cipher.decryptor()
    try:
        decrypted_message = decryptor.update(ciphertext) + decryptor.finalize_with_tag(tag)
        return decrypted_message.decode()
    except Exception as e:
        return f"Decryption error: {str(e)}"

# Function to validate the password
def validate_password(password: str) -> bool:
    if len(password) < 15:
        print("Password must be at least 15 characters long.")
        return False
    if not re.search(r"[a-z]", password):
        print("Password must contain at least one lowercase letter.")
        return False
    if not re.search(r"[A-Z]", password):
        print("Password must contain at least one uppercase letter.")
        return False
    if not re.search(r"[0-9]", password):
        print("Password must contain at least one digit.")
        return False
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        print("Password must contain at least one special character.")
        return False
    return True

# Main function to handle user input and operation mode
def main():
    mode = input("Choose mode: encryption (e) or decryption (d): ").strip().lower()
    if mode not in ['e', 'd']:
        print("Invalid mode selected. Please choose 'e' for encryption or 'd' for decryption.")
        return

    if mode == 'e':
        print(
            "Password must be at least 15 characters long and contain at least one lowercase letter, one uppercase letter, one digit, and one special character.")

    password = input("Enter password: ").strip()

    if mode == 'e' and not validate_password(password):
        return

    if mode == 'e':
        print("Enter plaintext (end input with an empty line):")
        plaintext_lines = []
        while True:
            try:
                line = input()
                if not line and plaintext_lines and plaintext_lines[-1] == '':
                    break
                plaintext_lines.append(line)
            except EOFError:
                break
        plaintext = '\n'.join(plaintext_lines)
        encrypted_message = encrypt_message(password, plaintext)
        print(f"Encrypted:\n{encrypted_message}")
        pyperclip.copy(encrypted_message)
        print("The encrypted message has been copied to the clipboard.")
    elif mode == 'd':
        print("Enter ciphertext (end input with an empty line):")
        ciphertext_lines = []
        while True:
            try:
                line = input()
                if not line:
                    break
                ciphertext_lines.append(line)
            except EOFError:
                break
        ciphertext = ''.join(ciphertext_lines)
        decrypted_message = decrypt_message(password, ciphertext)
        print(f"Decrypted:\n{decrypted_message}")

    input("Press Enter to exit...")

if __name__ == "__main__":
    main()
